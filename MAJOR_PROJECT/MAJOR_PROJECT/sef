const express = require("express");
const app = express();
const mongoose = require("mongoose");
const Listing = require("./model/listing.js");
const Review = require("./model/review.js");
const {listingSchema} = require("./schema.js")
const port = 8080;
const path = require("path");
const methodOverride = require("method-override");
const MONGO_URL = "mongodb://127.0.0.1:27017/wonderlust";
const ejsMate = require("ejs-mate");
const flash = require("connect-flash")
const passport = require("passport");
const LocalStrategy = require("passport-local");
const User = require("./model/user.js");
const { register } = require("module");
const session = require("express-session");


function wrapAsync(fn) {
  return function (req, res, next) {
    fn(req, res, next).catch(next);
  };
}

app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views"));
app.use(express.urlencoded({ extended: true }));
app.use(methodOverride("_method"));
app.engine("ejs", ejsMate);
app.use(express.static(path.join(__dirname, "/public")));

main()
  .then(() => {
    console.log("connected to DB");
  })
  .catch((err) => {
    console.log(err);
  });

async function main() {
  await mongoose.connect(MONGO_URL);
}

// app.get("/", (req, res) => {
//   res.send("hi im root");
// });

const validateListing = (req,res,next)=>{
  let {error} = listingSchema.validate(req.body);
  if(error){
    let errMsg = error.details.map((el)=> el.message).join(",");
    throw new ExpressError(400,errMsg)
  }
  else{
    next();
  }
}

app.listen(port, () => {
  console.log(`listening to server ${port}`);
});

//Reviews
//Post Route
app.post("/listings/:id/reviews",async(req,res)=>{
  let listing = await Listing.findById(req.params.id);
  let newReview = new Review(req.body.review);

  listing.reviews.push(newReview);

  await newReview.save();
  await listing.save();

  res.redirect(`/listings/${listing._id}`)
})
//Delete Route 
app.delete("/listings/:id/reviews/:reviewId",wrapAsync( async(req,res)=>{
  let {id, reviewId} = req.params;
  await Listing.findByIdAndUpdate(id,{$pull:{reviews:reviewId}})
  await Review.findById(reviewId);
  res.redirect(`/listings/${id}`);
}))

//Index Route
app.get("/listings", async (req, res) => {
  const allListings = await Listing.find({});
  res.render("listings/Recurit.ejs", { allListings });
});
//New Route
app.get("/listings/new", (req, res) => {
  res.render("listings/new.ejs");
});
//Show route
app.get("/listings/:id", async (req, res) => {
  let { id } = req.params;
  const listing = await Listing.findById(id).populate("reviews");
  res.render("listings/show.ejs", { listing });
});
//Create route
app.post("/listings",validateListing, async (req, res) => {
  let listing = req.body.listing;
  const newListing = new Listing({
    title: listing.title,
    description: listing.description,
    image: listing.image,
    price: listing.price,
    country: listing.country,
    location: listing.location,
  });
  await newListing.save();
  res.redirect("/listings");
});
//Edit Route
app.get("/listings/:id/edit", async (req, res) => {
  let { id } = req.params;
  const listing = await Listing.findById(id);
  res.render("listings/edit.ejs", { listing });
});
app.use(session({
  secret: 'your-secret-key',
  resave: false,
  saveUninitialized: false,
  cookie: { secure: false  } 
}));

app.use(flash());
app.use(passport.initialize());
app.use(passport.session());
passport.use(new LocalStrategy(User.authenticate()));

passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());

app.use((req,res,next)=>{
  res.locals.success = req.flash("sucess");
  res.locals.error = req.flash("error")
})

app.get("/demoUser",async(req,res)=>{
  let fakeUser = new User({
    email: "student@gmail.com",
    username: "delta-student"
  })
  let registeredUser =await User(register(fakeUser,"helloworld"));
  res.send(registeredUser)
})

//Home route 
app.get("/",(req,res)=>{
  res.render("listings/home");
})
//Update Route
app.put("/listings/:id", async (req, res) => {
  let { id } = req.params;
  await Listing.findByIdAndUpdate(id, { ...req.body.listing });
  res.redirect(`/listings/${id}`);
});
// Delete Route
app.delete("/listings/:id", async (req, res) => {
 let { id } = req.params;
  await Listing.findByIdAndDelete(id);
  res.redirect("/listings"); 
});

app.get("/show", async(req,res)=>{
  res.render("listings/showF");
});
//opportunities
app.get("/opportunitiesTeaching",async(req,res)=>{
  const allListings = await Listing.find({id : "teaching"});
  res.render("listings/Recurit",{allListings})
})
